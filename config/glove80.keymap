/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <behaviors/unicode.dtsi>


/* Mouse emulation */
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#include <dt-bindings/zmk/pointing.h>

/* On demand includes */


/* Helper Macros, based on https://github.com/urob/zmk-helpers/ */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

// Preprocessor mechanism to overload macros, cf. https://stackoverflow.com/a/27051616/6114651
#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N
#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define CONCAT_(a, b) a##b
#define CONCAT(a, b) CONCAT_(a, b)

#define ZMK_BEHAVIOR_CORE_tap_dance  \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    name: name { \
        ZMK_BEHAVIOR_CORE_ ## type; \
        __VA_ARGS__ \
    };

#define ZMK_TAP_DANCE(name, ...) \
    ZMK_BEHAVIOR(name, tap_dance, __VA_ARGS__)

#define ZMK_TD_LAYER(name, layer) \
    ZMK_TAP_DANCE(name, \
        tapping-term-ms = <200>; \
        bindings = <&mo layer>, <&to layer>; \
)

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_SYM 1
#define LAYER_NAV 2
#define LAYER_WNDWMGMT 3
#define LAYER_GREEK 4
#define LAYER_SUP 5
#define LAYER_SUB 6
#define LAYER_FNCYZNS 7
#define LAYER_MOUSE 8
#define LAYER_GAMING 9
#define LAYER_Magic 10

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */


/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        ZMK_TD_LAYER(lower, LAYER_Lower)
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
        win1: window_1 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW1_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N1>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win2: window_2 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW2_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N2>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win3: window_3 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW3_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N3>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win4: window_4 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW4_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N4>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win5: window_5 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW5_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N5>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win6: window_6 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW6_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N6>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win7: window_7 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW7_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N7>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win8: window_8 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW8_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N8>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win9: window_9 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW9_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N9>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
        
        win0: window_0 {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW0_SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp N0>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
    };
};


/* greek letters */ 
#define GK_alp	 0x3B1  // alpha 		(α)
#define GK_ALP 	 0x391  // Alpha 		(Α)
#define GK_bet   0x3B2 	// beta 		(β)
#define GK_BET   0x392 	// Beta 		(Β)
#define GK_gam	 0x3B3  // gamma 		(γ)
#define GK_GAM 	 0x393  // Gamma 		(Γ)
#define GK_del   0x3B4 	// delta 		(δ)
#define GK_DEL   0x394 	// Delta 		(Δ)
#define GK_eps	 0x3B5  // epsilon 		(ε)
#define GK_EPS 	 0x395  // Epsilon 		(Ε)
#define GK_zet   0x3B6 	// zeta 		(ζ)
#define GK_ZET   0x396 	// Zeta 		(Ζ)
#define GK_eta	 0x3B7  // eta 			(η)
#define GK_ETA	 0x397  // Eta 			(Η)
#define GK_vth 	 0x3D1 	// vartheta		(ϑ)
#define GK_VTH 	 0x3F4 	// VarTheta		(ϴ)
#define GK_the   0x3B8 	// theta 		(θ)
#define GK_THE   0x398 	// Theta 		(Θ)
#define GK_iot	 0x3B9  // iota 		(ι)
#define GK_IOT 	 0x399  // Iota 		(Ι)
#define GK_kap   0x3BA 	// kappa 		(κ)
#define GK_KAP   0x39A 	// Kappa 		(Κ)
#define GK_lam	 0x3BB  // lambda 		(λ)
#define GK_LAM 	 0x39B  // Lambda 		(Λ)
#define GK_mu	 0x3BC 	// mu 			(μ)
#define GK_MU  	 0x39C 	// Mu 			(Μ)
#define GK_nu	 0x3BD 	// nu 			(ν)
#define GK_NU  	 0x39D 	// Nu 			(Ν)
#define GK_xi	 0x3BE 	// xi 			(ξ)
#define GK_XI  	 0x39E 	// Xi 			(Ξ)
#define GK_omi   0x3BF 	// omicron 		(ο)
#define GK_OMI	 0x39F 	// Omicron 		(Ο)

#define GK_pi	 0x3C0 	// pi 			(π)
#define GK_PI  	 0x3A0 	// Pi 			(Π)
#define GK_vrh   0x3F1 	// varrho 		(ϱ) no capital version
#define GK_rho	 0x3C1 	// rho 			(ρ)
#define GK_RHO   0x3A1 	// Rho 			(Ρ)
#define GK_fsi 	 0x3C2 	// final sigma 	(ς) no capital version
#define GK_sig	 0x3C3 	// sigma 		(σ)
#define GK_SIG	 0x3A3 	// Sigma 		(Σ)
#define GK_tau	 0x3C4 	// tau 			(τ)
#define GK_TAU   0x3A4 	// Tau 			(Τ)
#define GK_ups   0x3C5 	// upsilon 		(υ)
#define GK_UPS	 0x3A5 	// Upsilon 		(Υ)
#define GK_vph	 0x3D5 	// varphi 		(ϕ) no capital version
#define GK_phi	 0x3C6 	// phi 			(φ)
#define GK_PHI   0x3A6 	// Phi 			(Φ)
#define GK_chi	 0x3C7 	// chi 			(χ)
#define GK_CHI   0x3A7 	// Chi 			(Χ)
#define GK_psi	 0x3C8 	// psi 			(ψ)
#define GK_PSI   0x3A8 	// Psi 			(Ψ)
#define GK_ome	 0x3C9 	// omega 		(ω)
#define GK_OME	 0x3A9 	// Omega 		(Ω)

/* subscript */
#define SUB_0   0x2080 	  // subscript 0
#define SUB_1   0x2081 	  // subscript 1
#define SUB_2   0x2082 	  // subscript 2
#define SUB_3   0x2083 	  // subscript 3
#define SUB_4   0x2084 	  // subscript 4
#define SUB_5   0x2085 	  // subscript 5
#define SUB_6   0x2086 	  // subscript 6
#define SUB_7   0x2087 	  // subscript 7
#define SUB_8   0x2088 	  // subscript 8
#define SUB_9   0x2089 	  // subscript 9

/* superscript */
#define SUP_0   0x2070 	  // superscript 0
#define SUP_1   0x00B9 	  // superscript 1
#define SUP_2   0x00B2 	  // superscript 2
#define SUP_3   0x00B3 	  // superscript 3
#define SUP_4   0x2074 	  // superscript 4
#define SUP_5   0x2075 	  // superscript 5
#define SUP_6   0x2076 	  // superscript 6
#define SUP_7   0x2077 	  // superscript 7
#define SUP_8   0x2078 	  // superscript 8
#define SUP_9   0x2079 	  // superscript 9

/* define german special characters */
#define DE_EURO  RA(E)           // €      
#define DE_UNDER LS(FSLH)        // _      
#define DE_LBKT  RA(N8)          // [     
#define DE_RBKT  RA(N9)          // ]        
#define DE_CARET GRAVE           // ^       
#define DE_BSLH  RA(MINUS)       // \     
#define DE_FSLH  LS(N7)          // /      
#define DE_LBRC  RA(N7)          // {     
#define DE_RBRC  RA(N0)          // }        
#define DE_STAR  LS(RBKT)        // *        
#define DE_PARA  LS(N3)          // §      
#define DE_HASH  BSLH            // #      
#define DE_DLLR  LS(N4)          // $     
#define DE_PIPE  RA(NON_US_BSLH) // |       
#define DE_TILDE RA(RBKT)        // ~        
#define DE_EXLC  LS(N1)          // !     
#define DE_LT    NON_US_BSLH     // <       
#define DE_GT    LS(NON_US_BSLH) // >       
#define DE_EQUAL LS(N0)          // =      
#define DE_AMPS  LS(N6)          // &      
#define DE_QMARK LS(MINUS)       // ?     
#define DE_LPAR  LS(N8)          // (       
#define DE_RPAR  LS(N9)          // )       
#define DE_MINUS FSLH            // -      
#define DE_COLON LS(DOT)         // :     
#define DE_AT    RA(Q)           // @       
#define DE_PLUS  RBKT            // +     
#define DE_PRCNT LS(N5)          // %       
#define DE_DQT   LS(N2)          // "       
#define DE_SQT   LS(BSLH)        // '      
#define DE_SEMI  LS(COMMA)       // ;    
#define DE_ADIA  SQT             // ä
#define DE_ODIA  SEMI            // ö
#define DE_UDIA  LBKT            // ü
#define DE_SS    MINUS           // ß

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LAYER_SYM LAYER_NAV>;
            then-layer = <LAYER_GREEK>;
        };
    };
};

/* Automatically generated macro definitions */
/ {
    macros {
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {


    };
};

/* Automatically generated combos definitions */


&uc {
  default-mode = <UC_MODE_WIN_COMPOSE>;  // Default to Linux input system
  win-compose-key = <F14>;        // Overwrite WinCompose compose key
};


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
            &none                 &none          &none          &none       &none                                                                                                          &none         &none      &none      &none    &none
            &kp ESC               &none          &none          &none       &none   &none                                                                                           &none  &none         &none      &none      &none    &none
            &mt LCTRL TAB         &kp X          &kp V          &kp L       &kp C   &kp W                                                                                           &kp K  &kp H         &kp G      &kp F      &kp Q    &mt RCTRL DE_SS
            &none                 &kp U          &kp I          &kp A       &kp E   &kp O                                                                                           &kp S  &kp N         &kp R      &kp T      &kp D    &kp Z
            &kp LSHFT             &kp DE_UDIA    &kp DE_ODIA    &kp DE_ADIA &kp P   &kp Y   &none          &none               &none  /*|*/  &none  &none          &mo LAYER_MOUSE  &kp B  &kp M         &kp COMMA  &kp DOT    &kp J    &kp RSHFT
            &magic LAYER_Magic 0  &kp LG(LS(S))  &kp LG(LS(T))  &kp LGUI    &kp LALT        &mo LAYER_NAV  &mo LAYER_WNDWMGMT  &none  /*|*/  &none  &mo LAYER_SYM  &kp SPACE               &kp LC(BSPC)  &kp RGUI   &kp K_APP  &kp RET  &none
            >;
        };

        layer_SYM {
            bindings = <
            &trans     &trans         &trans        &trans               &trans                                                                                                   &trans           &trans               &trans        &trans         &trans
            &trans     &trans         &trans        &trans               &trans               &trans                                                               &trans         &trans           &trans               &trans        &trans         &trans
            &trans     &kp RA(E)      &kp LS(FSLH)  &kp RA(N8)           &kp RA(N9)           &kp GRAVE                                                            &kp LS(N1)     &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(N0)    &kp LS(N6)     &trans
            &trans     &kp RA(MINUS)  &kp LS(N7)    &kp RA(N7)           &kp RA(N0)           &kp LS(RBKT)                                                         &kp LS(MINUS)  &kp LS(N8)       &kp LS(N9)           &kp FSLH      &kp LS(DOT)    &kp DE_AT
            &kp LS(N3) &kp BSLH       &kp LS(N4)    &kp RA(NON_US_BSLH)  &kp RA(RBKT)         &trans        &trans  &trans  &trans  /*|*/  &trans  &trans  &trans  &kp RBKT       &kp LS(N5)       &kp LS(N2)           &kp LS(BSLH)  &kp LS(COMMA)  &trans
            &trans     &trans         &trans        &mo LAYER_SUB        &mo LAYER_SUP                      &trans  &trans  &trans  /*|*/  &trans  &trans  &trans                 &trans           &trans               &trans        &trans         &trans
            >;
        };

        layer_NAV {
            bindings = <
            &trans  &trans     &trans    &trans    &trans                                                                                       &trans     &trans     &trans     &trans         &trans
            &trans  &trans     &trans    &trans    &trans     &trans                                                               &trans       &trans     &trans     &trans     &trans         &trans
            &trans  &kp PG_UP  &kp BSPC  &kp UP    &kp DEL    &kp PG_DN                                                            &trans       &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_PLUS    &trans
            &trans  &kp HOME   &kp LEFT  &kp DOWN  &kp RIGHT  &kp END                                                              &trans       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp COMMA      &kp DOT
            &trans  &kp ESC    &kp TAB   &kp INS   &kp RET    &kp LC(Y)  &trans  &trans  &trans  /*|*/  &trans  &trans  &trans     &kp LS(DOT)  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp LS(COMMA)  &trans
            &trans  &trans     &trans    &trans    &trans                &trans  &trans  &trans  /*|*/  &trans  &trans  &kp KP_N0               &trans     &trans     &trans     &trans         &trans
            >;
        };

        layer_WNDWMGMT {
            bindings = <
            &trans            &trans              &trans              &trans            &trans                                                                                                      &trans   &trans   &trans   &trans   &trans
            &trans            &trans              &trans              &trans            &trans               &trans                                                                &trans           &trans   &trans   &trans   &trans   &trans
            &kp LA(F4)        &win1               &win2               &win3             &win4                &win5                                                                 &kp LG(LS(F15))  &kp F9   &kp F10  &kp F11  &kp F12  &trans
            &kp LG(TAB)       &win6               &win7               &win8             &win9                &win0                                                                 &kp F13          &kp F5   &kp F6   &kp F7   &kp F8   &trans
            &kp LG(LS(SEMI))  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &kp LG(PG_DN)  &trans  &trans  &trans  /*|*/  &trans  &trans  &trans  &kp LG(F15)      &kp F1   &kp F2   &kp F3   &kp F4   &trans
            &trans            &trans              &trans              &trans            &trans                              &trans  &trans  &trans  /*|*/  &trans  &trans  &trans                   &trans   &trans   &trans   &trans   &trans
            >;
        };

        layer_GREEK {
            bindings = <
            &none  &none            &none                &none              &none                                                                                                        &none               &none              &none              &none  &none
            &none  &none            &none                &none              &none              &none                                                                  &none              &none               &none              &none              &none  &none
            &none  &uc GK_xi GK_XI  &none                &uc GK_lam GK_LAM  &uc GK_chi GK_CHI  &uc GK_ome GK_OME                                                      &uc GK_kap GK_KAP  &uc GK_psi GK_PSI   &uc GK_gam GK_GAM  &uc GK_phi GK_PHI  &uc GK_vph 0       &uc GK_fsi 0
            &none  &none            &uc GK_iot GK_IOT    &uc GK_alp GK_ALP  &uc GK_eps GK_EPS  &uc GK_omi GK_OMI                                                      &uc GK_sig GK_SIG  &uc GK_nu GK_NU     &uc GK_rho GK_RHO  &uc GK_tau GK_TAU  &uc GK_del GK_DEL  &uc GK_ups GK_UPS
            &trans &none            &none                &uc GK_eta GK_ETA  &uc GK_pi GK_PI    &uc GK_zet GK_ZET  &none  &none   &none /*|*/  &none   &none   &none   &uc GK_bet GK_BET  &uc GK_mu GK_MU     &uc GK_vrh 0       &uc GK_the GK_THE  &uc GK_vth GK_VTH  &trans
            &none  &none            &none                &none              &none                                 &none  &none   &none /*|*/  &none   &none   &none                      &none               &none              &none              &none  &none
            >;
        };

        layer_SUP {
            bindings = <
            &none  &none  &none  &none  &none                                                                         &none        &none        &none        &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &none        &none        &none        &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &uc SUP_7 0  &uc SUP_8 0  &uc SUP_9 0  &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &uc SUP_4 0  &uc SUP_5 0  &uc SUP_6 0  &none  &none
            &none  &none  &none  &none  &none  &none   &none   &none  &kp D /*|*/  &none  &none  &none        &none   &uc SUP_1 0  &uc SUP_2 0  &uc SUP_3 0  &none  &none
            &none  &none  &none  &none  &none          &none   &none  &none /*|*/  &none  &none  &uc SUP_0 0          &none        &none        &none        &none  &none
            >;
        };

        layer_SUB {
            bindings = <
            &none  &none  &none  &none  &none                                                                         &none        &none        &none        &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &none        &none        &none        &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &uc SUB_7 0  &uc SUB_8 0  &uc SUB_9 0  &none  &none
            &none  &none  &none  &none  &none  &none                                                          &none   &uc SUB_4 0  &uc SUB_5 0  &uc SUB_6 0  &none  &none
            &none  &none  &none  &none  &none  &none   &none   &none  &none /*|*/  &none  &none  &none        &none   &uc SUB_1 0  &uc SUB_2 0  &uc SUB_3 0  &none  &none
            &none  &none  &none  &none  &none          &none   &none  &none /*|*/  &none  &none  &uc SUB_0 0          &none        &none        &none        &none  &none
            >;
        };

        layer_FNCYZNS {
            bindings = <
            &none  &none  &none  &none  &none                                                                    &none   &none   &none   &none  &none
            &none  &none  &none  &none  &none  &none                                                     &none   &none   &none   &none   &none  &none
            &none  &none  &none  &none  &none  &none                                                     &none   &none   &none   &none   &none  &none
            &none  &none  &none  &none  &none  &none                                                     &none   &none   &none   &none   &none  &none
            &none  &none  &none  &none  &none  &none   &none   &none  &none /*|*/  &none  &none  &none   &none   &none   &none   &none   &none  &none
            &none  &none  &none  &none  &none          &none   &none  &none /*|*/  &none  &none  &none           &none   &none   &none   &none  &none
            >;
        };

        layer_MOUSE {
            bindings = <
            &none  &none  &none          &none          &none                                                                                     &none            &none           &none            &none  &none
            &none  &none  &none          &none          &none            &none                                                            &none   &none            &none           &none            &none  &none
            &none  &none  &mkp MB4       &mmv MOVE_UP   &mkp MB5         &none                                                            &none   &none            &msc SCRL_UP    &none            &none  &none
            &none  &none  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT  &none                                                            &none   &msc SCRL_LEFT   &msc SCRL_DOWN  &msc SCRL_RIGHT  &none  &none
            &none  &none  &none          &none          &none            &none   &mkp MCLK  &none      &none /*|*/  &none  &none  &none   &none   &none            &none           &none            &none  &none
            &none  &none  &none          &none          &none                    &mkp LCLK  &mkp RCLK  &none /*|*/  &none  &none  &none           &none            &none           &none            &none  &none
            >;
        };

        layer_GAMING {
            bindings = <
            &none  &none        &none   &none   &none                                                                                   &none   &none   &none   &none  &none
            &none  &kp N1       &kp N2  &kp N3  &kp N4  &kp N5                                                                  &none   &none   &none   &none   &none  &none
            &none  &kp TAB      &kp Q   &kp W   &kp E   &kp R                                                                   &none   &none   &none   &none   &none  &none
            &none  &kp LSHIFT   &kp A   &kp S   &kp D   &kp E                                                                   &none   &none   &none   &none   &none  &none
            &none  &kp LCTL     &kp Z   &kp X   &kp C   &kp V   &none        &none  &none /*|*/  &to LAYER_Base  &none  &none   &none   &none   &none   &none   &none  &none
            &none  &none        &none   &none   &none           &kp SPACE    &none  &none /*|*/  &none           &none  &none           &none   &none   &none   &none  &none
            >;
        };

        layer_Magic {
            bindings = <
            &bt BT_CLR   &none            &none            &none            &none                                                                                                      &none       &none            &none       &none  &bt BT_CLR_ALL
            &none        &none            &none            &none            &none            &none                                                                       &none         &none       &none            &none       &none  &none
            &none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                             &kp C_VOL_UP  &none       &none            &none       &none  &none
            &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                             &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY_PAUSE &kp C_NEXT  &none  &bootloader
            &sys_reset   &none            &none            &none            &none            &none            &bt_2   &bt_3  &kp F14       /*|*/  &none   &none   &none  &kp C_MUTE    &none       &none            &none       &none  &sys_reset
            &none        &none            &none            &none            &kp LS(PAUSE_BREAK)               &bt_0   &bt_1  &out OUT_USB  /*|*/  &none   &none   &none                &none       &none            &none       &none  &none
            >;
        };

    };
};
